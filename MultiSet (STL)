MultiSet : Multisets are a type of associative containers similar to the set, with the exception that multiple elements can have the same values.


Editorial Link : 
https://www.geeksforgeeks.org/multiset-in-cpp-stl/

Explanation : 
#include<bits/stdc++.h>
using namespace std;

void explainMultiset() {
  ////////////////////////////////////////////////////////////////////////////////////////
  /*
  multiset<int> s {1,1,2,3,4}; // declaration and initialization of multiset
  for(int i : s) cout << i <<  " ";
  s.insert(1); // inserts element into multiset
  s.emplace(5); // inserts element into multiset
  */
  ////////////////////////////////////////////////////////////////////////////////////////
  
  // Others Methods of multiset
  /*
  // find() :: finds the given element
  multiset<int> s = {2,5,7,8};
  // auto it = s.find(5); // returns iterator pointing to the element found and to end if not found
  auto it = s.find(5);
  
  // erase() :: erases the specified element
  s.erase(it);  // T.C => O(1)
  s.erase(2); // erases the specified element // T.C => O(logn)
  for(int i : s) cout << i <<  " ";
  */
  
  // when we erase common element then all elements common are deleted
  multiset<int> s {1,2,2,2,3,4};
  //s.erase(2);
  //for(int i : s) cout << i <<  " ";
  // to avoid this we use iterator as follows :
  //multiset<int> :: iterator it = s.find(2);
  //s.erase(it); // deletes the first occurence of element to which it is pointing 

  /*
  // deleting range of elements
  auto it = s.begin();
  ++it;
  auto it1 = s.end();
  it1--;
  s.erase(it, it1);
  for(int i : s) cout << i <<  " ";
  */

  // cout << endl << s.count(6); // gives the count of element as 0 if does not exist and 1 if it exists

  /*
  // erase a range of element 
  multiset<int> s = {1,5,6,7};
  multiset<int> :: iterator it = s.find(5);
  multiset<int> :: iterator it1 = s.find(6);
  s.erase(it, ++it1);    // here range is [5,6) so 6 is not included so we incremented iterator by
                         // one index so it1 becomes 7 and 6 gets included in range
  for(int i : s) cout << i <<  " ";
  cout << endl;
  */

  /*
  // Lower and Upper Bound Methods
  multiset<int> s1 {1,2,3,5}; 
  auto it = s1.upper_bound(1); // gives upper bound
  auto it1 = s1.lower_bound(3); // gives lower bound
  */
  ////////////////////////////////////////////////////////////////////////////////////////
  
  // Rest of the methods of multiset are as same as that of set
  // size(), swap(), empty() can be used as same as used in lists and vectors

}

int main() {
  explainMultiset();
  return 0;
}
