Kadane's algorithm is an algorithm for finding the maximum subarray sum in a given array of numbers. It is a dynamic programming algorithm that allows us to find the 
maximum sum subarray in a given array in linear time.

Algorithm :
1) Add current element to the sum var.
2) Assign the max(sum, maximumSum) in maximumSum.
3) Assign 0 to sum if it's sum < 0 i.e. if it is negative.

#include <iostream>
#include <algorithm>

int maxSubArraySum(int a[], int size) {
  int max_so_far = a[0];
  int curr_max = a[0];
  for (int i = 1; i < size; i++) {
    curr_max = std::max(a[i], curr_max + a[i]);
    max_so_far = std::max(max_so_far, curr_max);
  }  
  return max_so_far;
}

int main() {
  int a[] = {-2, -3, 4, -1, -2, 1, 5, -3};
  int size = sizeof(a)/sizeof(a[0]);
  int max_sum = maxSubArraySum(a, size);
  std::cout << "Maximum subarray sum is: " << max_sum << std::endl; 
  return 0;
}

In this example, the array a is passed to the maxSubArraySum function, which returns the maximum subarray sum. The max function from the algorithm library is used to 
find the maximum of two values.

The output of this program will be:
Maximum subarray sum is: 7
