In Unorderd_Map
-> Key-Value pair are stored;
-> Duplicate Keys cannot be stored i.e if for duplicate key it updates the previous same key with current key's value;
-> Stores Key in UnSorted Manner.
-> Implemented uing Hash Tables (Buckets of Arrays).

Editorial Link : 
https://www.geeksforgeeks.org/unordered_map-in-cpp-stl/

// All methods are same as set and unordered map

// 1. Counting and Storing Frequency of Elements of Vector in Unorderd_Map;
#include<bits/stdc++.h>
using namespace std;

int main() {
    vector<int> ans {1,2,2,4,1,6,7,4,4,9};
    Unorderd_Map<int,int> mp;
    for(int i = 0; i < 10; i++) { // Counting and Storing Frequency of Elements
        mp[ans[i]]++;  // Updating key's by incrementing by 1 i.e when elements comes first time it will have value 1 and if it comes 2nd time it's value will be 2 as 
                       // we are doing ++(increment) and so on....
    }
    Unorderd_Map<int,int> :: iterator it; // Creating a Iterator for Unorderd_Map as we can directly access the Unorderd_Map we have to use iterator.
    for(it = mp.begin(); it != mp.end(); it++) {            // first iterator will point first key and after every iteration it will increment it(iterator) and the
        cout<< it -> first << " " << it -> second << endl;  // loop will run till it(iterator) will point last key; 
    }
  return 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// 2.
#include <iostream>
#include <unordered_map>
#include <iterator>
#include <algorithm>
using namespace std;

int main() {
    unordered_map<int, int> mp;
    // Inserting elements into mp map;
    mp.insert(pair<int,int>(1,10));
    mp.insert(pair<int,int>(2,20));
    mp.insert(pair<int,int>(3,30));
    mp[4] = 40;
    mp[5] = 50;
    
    // Creating iterator of mp map;
    unordered_map<int, int> :: iterator it;
    
    // Printing mp map elements from begin till it does not reaches it's end i.e. till the end;
    cout<< endl << "Printing mp map elements from begin till it does not reaches it's end i.e. till the end;" << endl;
    for(it = mp.begin(); it != mp.end(); it++) {
        cout<< "Key : " << it -> first << " Pair : " << it -> second << endl;
    }
    
    // Erasing mp map elements till some limit
    // Here removing elements greater key 3;
    /*
    cout<< endl << "Here removing elements greater than key 3;" << endl;
    mp.erase(mp.begin(), mp.find(3));
    for(it = mp.begin(); it != mp.end(); it++) {
        cout<< "Key : " << it -> first << " Pair : " << it -> second << endl;
    }
    */
    
    // Erasing particular elements of mp map
    /*
    cout<< endl << "Here removing all elements with key 3;" << endl;
    mp.erase(3);
    for(it = mp.begin(); it != mp.end(); it++) {
        cout<< "Key : " << it -> first << " Pair : " << it -> second << endl;
    }
    */
    // begin() returns iterator pointing to beginning element;
    it = mp.begin();
    cout<< endl << it -> first << " " << it -> second << endl;
    return 0;
}

